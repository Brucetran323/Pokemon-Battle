---- FILE EXPLANATIONS & THIER IMPORTS ----
config.py : # API KEYS, SECRET KEYS, BASIC STRUCTURES OF ROUTING, TELLS OUR APP WHERE TO FIND ITSSELF:
import os 
basedir = os.path.abspath(os.path.dirname(__name__)) 
class Config(): <---- define what config is
    FLASK_APP = os.environ.get('FLASK_APP') <--- gets this flask variable from .env
    FLASK_DEBUG = os.environ.get('FLASK_DEBUG') <--- gets this flask variable from .env
    
.evn : # This holds all your SECRET info 
FLASK_APP=app
FLASK_DEBUG=1

__init__.py : # This is how flask knows what to do with it's self. This explains what the flask app is:
from flask import Flask
from config import Config
from .auth.routes import auth
app = Flask(__name__)
app.config.from_object(Config)
app.register_blueprint(auth)
from . import routes 

routes.py : # Public train servies for your website, use this to program where the user goes and what it does:
from app import app 
from flask import render_template

requirments.txt : # this file is used for others to see what is installed in order to run your app correctly:

.gitignore : # when pushing to git, there are files you don't want out in then free web:
__pycache__, env, venv : goes in the here

blueprints: modularity, plug and play: calling it agaig in other pages

AUTH routes: routes for auth folder:
from flask import Blueprint, render_template
auth = Blueprint('auth', __name__, template_folder='auth_templates')

JINJA: write python or call pythonic code on HTML
{{}} <---- Call variable
{{% **EXPRESSIONS** %}} <---- Expressions (if statments, forloops, ext...)
{{% end(x) %}} <--- whenever using jinja expressions, you need to end it using this, (x) represents whatever expression you were using***NOSPACES BETWEEN OR ()
{{ url_for('**FOLDER-NAME**',filename = '**FILE-NAME**') }} <--- Use this to call on files

---- MAIN FOLDER ----
1. make virtual enviorment, open terminal, commands: pyhton -m venv venv, venv/scripts/activate ("deactivate" to get out of venv)
2. install flask
commands : pip install flask, flask pip freeze > requirments.txt 
(file should have been made, check in your explorer page for a requirments. inside that txt file should be flask related items)
3. make .env file then pip install python-dotenv, flask pip freeze > requirments.txt
4. make .gitignore

---- APP FOLDER ----
1. Make a app folder in main folder
2. Make a templates folder inside app folder : this will store all of your HTML files
3. Make a static folder inside app folder : this will hold CSS and images
4. Make a auth folder inside app folder : this will hold authentication stuff
5. Inside your APP folder make the following files : __init__.py, routes.py
